Patch mostly based on (Removed reference to removed file):

From: Martin Pitt <martin.pitt@ubuntu.com>
Date: Fri, 17 Oct 2014 15:01:01 +0200
Subject: udev hwdb: Support shipping pre-compiled database in system images

In some cases it is preferable to ship system images with a pre-generated
binary hwdb database, to avoid having to build it at runtime, avoid shipping
the source hwdb files, or avoid storing large binary files in /etc.

So if hwdb.bin does not exist in /etc/udev/, fall back to looking for it in
UDEVLIBEXECDIR. This keeps the possibility to add files to /etc/udev/hwdb.d/
and re-generating the database which trumps the one in /usr/lib.

Add a new --usr flag to "udevadm hwdb --update" which puts the database
into UDEVLIBEXECDIR.

Adjust systemd-udev-hwdb-update.service to not generate the file in /etc if we
already have it in /usr.
---
 man/udev.xml               |  4 +++-
 man/udevadm.xml            |  9 +++++++++
 src/libudev/libudev-hwdb.c | 42 ++++++++++++++++++++++++++++++++++++------
 src/libudev/Makefile.am    |  1 +
 src/udev/udevadm-hwdb.c    | 13 ++++++++++++-
 5 files changed, 61 insertions(+), 8 deletions(-)


Notes: Edited for eudev-3.0 - Anto

diff --git a/man/udev.xml b/man/udev.xml
index e40af40..7befa97 100644
--- a/man/udev.xml
+++ b/man/udev.xml
@@ -758,7 +758,9 @@
 
       <para>The content of all hwdb files is read by
       <citerefentry><refentrytitle>udevadm</refentrytitle><manvolnum>8</manvolnum></citerefentry>
-      and compiled to a binary database located at <filename>/etc/udev/hwdb.bin</filename>.
+      and compiled to a binary database located at <filename>/etc/udev/hwdb.bin</filename>,
+      or alternatively <filename>/usr/lib/udev/hwdb.bin</filename> if you want ship the compiled
+      database in an immutable image.
       During runtime only the binary database is used.</para>
   </refsect1>
 
diff --git a/man/udevadm.xml b/man/udevadm.xml
index 1b349c6..6e2c4b4 100644
--- a/man/udevadm.xml
+++ b/man/udevadm.xml
@@ -529,6 +529,15 @@
           </listitem>
         </varlistentry>
         <varlistentry>
+          <term><option>--usr</option></term>
+          <listitem>
+            <para>Put the compiled database into <filename>/usr/lib/udev/hwdb.bin</filename> instead.
+            Use this if you want to ship a pre-compiled database in immutable system images, or
+            don't use <filename>/etc/udev/hwdb.d</filename> and want to avoid large binary files in
+            <filename>/etc</filename>.</para>
+          </listitem>
+        </varlistentry>
+        <varlistentry>
           <term><option>-t</option></term>
           <term><option>--test=<replaceable>string</replaceable></option></term>
           <listitem>
diff --git a/src/libudev/libudev-hwdb.c b/src/libudev/libudev-hwdb.c
index 7af230c..0a1365e 100644
--- a/src/libudev/libudev-hwdb.c
+++ b/src/libudev/libudev-hwdb.c
@@ -256,6 +256,11 @@ static int trie_search_f(struct udev_hwdb *hwdb, const char *search) {
         return 0;
 }
 
+static const char hwdb_bin_paths[] =
+    "/etc/udev/hwdb.bin\0"
+    UDEV_LIBEXEC_DIR "/hwdb.bin\0";
+
+
 /**
  * udev_hwdb_new:
  * @udev: udev library context
@@ -266,6 +271,7 @@ static int trie_search_f(struct udev_hwdb *hwdb, const char *search) {
  **/
 _public_ struct udev_hwdb *udev_hwdb_new(struct udev *udev) {
         struct udev_hwdb *hwdb;
+        const char *hwdb_bin_path;
         const char sig[] = HWDB_SIG;
 
         hwdb = new0(struct udev_hwdb, 1);
@@ -275,30 +281,43 @@ _public_ struct udev_hwdb *udev_hwdb_new(struct udev *udev) {
         hwdb->refcount = 1;
         udev_list_init(udev, &hwdb->properties_list, true);
 
-        hwdb->f = fopen(UDEV_HWDB_BIN, "re");
+        /* find hwdb.bin in hwdb_bin_paths */
+        NULSTR_FOREACH(hwdb_bin_path, hwdb_bin_paths) {
+                hwdb->f = fopen(hwdb_bin_path, "re");
+                if (hwdb->f)
+                        break;
+                else if (errno == ENOENT)
+                        continue;
+                else {
+                        log_debug("error reading %s", hwdb_bin_path);
+                        udev_hwdb_unref(hwdb);
+                        return NULL;
+                }
+        }
+
         if (!hwdb->f) {
-                log_debug(UDEV_HWDB_BIN "does not exist, please run udevadm hwdb --update");
+                log_debug("%s does not exist, please run udevadm hwdb --update", hwdb_bin_path);
                 udev_hwdb_unref(hwdb);
                 return NULL;
         }
 
         if (fstat(fileno(hwdb->f), &hwdb->st) < 0 ||
             (size_t)hwdb->st.st_size < offsetof(struct trie_header_f, strings_len) + 8) {
-                log_debug_errno(errno, "error reading " UDEV_HWDB_BIN ": %m");
+                log_debug_errno(errno, "error reading %s: %m", hwdb_bin_path);
                 udev_hwdb_unref(hwdb);
                 return NULL;
         }
 
         hwdb->map = mmap(0, hwdb->st.st_size, PROT_READ, MAP_SHARED, fileno(hwdb->f), 0);
         if (hwdb->map == MAP_FAILED) {
-                log_debug_errno(errno, "error mapping " UDEV_HWDB_BIN ": %m");
+                log_debug_errno(errno, "error mapping %s: %m", hwdb_bin_path);
                 udev_hwdb_unref(hwdb);
                 return NULL;
         }
 
         if (memcmp(hwdb->map, sig, sizeof(hwdb->head->signature)) != 0 ||
             (size_t)hwdb->st.st_size != le64toh(hwdb->head->file_size)) {
-                log_debug("error recognizing the format of " UDEV_HWDB_BIN);
+                log_debug("error recognizing the format of %s", hwdb_bin_path);
                 udev_hwdb_unref(hwdb);
                 return NULL;
         }
@@ -352,15 +371,25 @@ _public_ struct udev_hwdb *udev_hwdb_unref(struct udev_hwdb *hwdb) {
 }
 
 bool udev_hwdb_validate(struct udev_hwdb *hwdb) {
+        bool found = false;
+        const char* p;
         struct stat st;
 
         if (!hwdb)
                 return false;
         if (!hwdb->f)
                 return false;
-        if (stat("/etc/udev/hwdb.bin", &st) < 0)
+
+        /* if hwdb.bin doesn't exist anywhere, we need to update */
+        NULSTR_FOREACH(p, hwdb_bin_paths) {
+                if (stat(p, &st) >= 0) {
+                        found = true;
+                        break;
+                }
+        }
+        if (!found)
                 return true;

         if (timespec_load(&hwdb->st.st_mtim) != timespec_load(&st.st_mtim))
                 return true;
         return false;
diff --git a/src/udev/udevadm-hwdb.c b/src/udev/udevadm-hwdb.c
index de535de..d677391 100644
--- a/src/udev/udevadm-hwdb.c
+++ b/src/udev/udevadm-hwdb.c
@@ -547,14 +547,20 @@ static int import_file(struct udev *udev, struct trie *trie, const char *filenam
 static void help(void) {
         printf("Usage: udevadm hwdb OPTIONS\n"
                "  -u,--update          update the hardware database\n"
+               "  --usr                generate in " UDEV_LIBEXEC_DIR " instead of /etc/udev\n"
                "  -t,--test=MODALIAS   query database and print result\n"
                "  -r,--root=PATH       alternative root path in the filesystem\n"
                "  -h,--help\n\n");
 }
 
 static int adm_hwdb(struct udev *udev, int argc, char *argv[]) {
+        enum {
+                ARG_USR = 0x100,
+        };
+
         static const struct option options[] = {
                 { "update", no_argument,       NULL, 'u' },
+                { "usr",    no_argument,       NULL, ARG_USR },
                 { "test",   required_argument, NULL, 't' },
                 { "root",   required_argument, NULL, 'r' },
                 { "help",   no_argument,       NULL, 'h' },
@@ -562,6 +562,7 @@ static int adm_hwdb(struct udev *udev, int argc, char *argv[]) {
         };
         const char *test = NULL;
         const char *root = "";
+        const char *hwdb_bin_dir = "/etc/udev";
         bool update = false;
         struct trie *trie = NULL;
         int err, c;
@@ -572,6 +572,9 @@ static int adm_hwdb(struct udev *udev, int argc, char *argv[]) {
                 case 'u':
                         update = true;
                         break;
+                case ARG_USR:
+                        hwdb_bin_dir = UDEV_LIBEXEC_DIR;
+                        break;
                 case 't':
                         test = optarg;
                         break;
@@ -645,7 +645,8 @@ static int adm_hwdb(struct udev *udev, int argc, char *argv[]) {
                 log_debug("strings dedup'ed: %8zu bytes (%8zu)",
                           trie->strings->dedup_len, trie->strings->dedup_count);
 
-                if (asprintf(&hwdb_bin, "%s/%s", root, hwdb_bin) < 0) {
+                hwdb_bin = strjoin(root, "/", hwdb_bin_dir, "/hwdb.bin", NULL);
+                if (!hwdb_bin) {
                         rc = EXIT_FAILURE;
                         goto out;
                 }
diff --git a/src/libudev/Makefile.am b/src/libudev/Makefile.am
index 35f5be2..0fb53e0 100644
--- a/src/libudev/Makefile.am
+++ b/src/libudev/Makefile.am
@@ -19,6 +19,7 @@ AM_CPPFLAGS = \
 	-DUDEV_CONF_FILE=\"$(udevconffile)\" \
 	-DUDEV_HWDB_BIN=\"$(udevhwdbbin)\" \
 	-DUDEV_VERSION=$(UDEV_VERSION) \
+	-DUDEV_LIBEXEC_DIR=\"$(udevlibexecdir)\" \
 	-I $(top_srcdir)/src/shared
 
 lib_LTLIBRARIES = \
